#include  "msp430g2253.h"  //importing MSP-430 library
#include "include.h"          
#include <SPI.h>                //importing SPI library
#include <AIR430BoostFCC.h>   //importing CC1100L booster library 

/*
Created by PJ Banerjee
ADC conversion of analog voltage input and wireless transmission of digital values from conversion
*/


// -----------------------------------------------------------------------------
/**
 *  Defines, enumerations, and structure definitions
 */

#define ADDRESS_LOCAL    0x02  //Defining hex address to store conversion
#define ADDRESS_REMOTE   0x01  //Defining hex address for wireless transmission


/**
 *  sPacket - packet format.
 */

 struct sPacket
{
  uint8_t from;           // Local node address that message originated from
  uint8_t message[4];    // Local node message [MAX. 59 bytes]
};

// -----------------------------------------------------------------------------
/**
 *  Global data
 */

struct sPacket txPacket;  //Creating sPacket structure called txPacket

int k =0;           //Initiliatizing variables
char j;
int n;
int rev=0;
int digital_value=0;

void setup()
 {
  
   Radio.begin(ADDRESS_LOCAL, CHANNEL_1, POWER_MAX); //Library function to configure wireless transmission

   txPacket.from = ADDRESS_LOCAL;              //Setting local address to get transfer packet
   memset(txPacket.message, 0, sizeof(txPacket.message));  //Configuring packet transfer
  
  Serial.begin(9600);
 /*
  WDTCTL = WDTPW + WDTHOLD;                    //for manual configuration of ADC, Disable watchdog timer
  ADC10CTL0 = ADC10SHT_3 + ADC10IE +SREF_0;  //Manually configuring ADC registers without library, clock divisions, 10 bit conversion enable and voltrage reference
  ADC10CTL1 = INCH_1 + CONSEQ_0;             //functions, pin configuration and single channel single conversion
  //P1SEL |= BIT1;
  P1SEL |= BIT2;         //Setting pin direction on port
*/ 
 }
// ADC10 interrupt service routine
/*
#pragma vector=ADC10_VECTOR                         //Interrupt method
__interrupt void ADC10_ISR (void)
{
	__bic_SR_register_on_exit(CPUOFF);        // Return to active mode }
}
*/
void loop()
{
   uint8_t temp[4];   //Array of unsigned 8 bit integers
   
   k = 0;
 while(k < 1)
  {
   digital_value = analogRead(A4);   //Library function for analog to digital conversion
          //Storing in integer variable digital_value
   // print out the value you read:
   delay(1); // delay in between reads for stability
 
   if(digital_value ==0)   //If ADC value is 0
    {
     txPacket.message[0] = '0';  //Configures packet message bytes to all 0 if input is 0
     txPacket.message[1] = '0';  
     txPacket.message[2] = '0';  
     txPacket.message[3] = '0';
     k++;
    }   
   else if((digital_value%10)==0)
    {
    }
   else
    {
      uint32_t temp = digital_value;  //Storing conversion value into 32 bit unsigned value
      while(temp != 0)
       {
         rev = rev * 10;       //reverses number for packet transmission
         rev = rev + temp%10;
         temp = temp/10;
       }
     if(rev < 100)
      rev = rev * 100;
     if(rev < 1000)
      rev = rev * 10;
 
    for(int i = 3; rev != 0; rev=rev/10)
     {
       txPacket.message[k] = (rev%10)+0x30;         
       i--;
       k++;
     }
    }
  /*
        Algorithm above reverses integers in digital value
        to be stored into message array in sPacket structure
      so library function can be used to wireless transmit 
      information in the form of a packet of characters
   */  
  
  Radio.transmit(ADDRESS_REMOTE, (unsigned char*)&txPacket, sizeof(txPacket));
   //Transmits packet of unsigned characters which translates into
   //value of analog to digital conversion
  }
 
 // TI_CC_SW_PxIE = TI_CC_SW1;                // Activate interrupt enables
  /*
  __enable_interrupt();	
   __delay_cycles(100); 	   //Manual analog to digital configuration
  ADC10CTL0 |= ENC + ADC10SC+ ADC10ON; // without library functions, enable ADC 
  __delay_cycles(100);
  digital_value = ADC10MEM;           //Store valvue of conversion in variable 
 // __bic_SR_register(CPUOFF + GIE);            
  ADC10CTL0 &= ~ENC;   //Disables continuous ADC
  */

}



